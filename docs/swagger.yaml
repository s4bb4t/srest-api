basePath: /api/v1
definitions:
  github_com_sabbatD_srest-api_internal_lib_todoConfig.Meta:
    properties:
      total_amount:
        type: integer
    type: object
  github_com_sabbatD_srest-api_internal_lib_todoConfig.MetaResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.Todo'
        type: array
      info:
        $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.TodoInfo'
      meta:
        $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.Meta'
    type: object
  github_com_sabbatD_srest-api_internal_lib_todoConfig.Todo:
    properties:
      created:
        type: string
      id:
        type: integer
      isdone:
        type: boolean
      title:
        type: string
    type: object
  github_com_sabbatD_srest-api_internal_lib_todoConfig.TodoInfo:
    properties:
      all:
        type: integer
      completed:
        type: integer
      inwork:
        type: integer
    type: object
  github_com_sabbatD_srest-api_internal_lib_todoConfig.TodoRequest:
    properties:
      isdone:
        type: boolean
      title:
        type: string
    type: object
  github_com_sabbatD_srest-api_internal_lib_userConfig.AuthData:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser:
    properties:
      admin:
        type: boolean
      block:
        type: boolean
      date:
        type: string
      email:
        type: string
      id:
        type: integer
      login:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  github_com_sabbatD_srest-api_internal_lib_userConfig.User:
    properties:
      email:
        type: string
      login:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  internal_http-server_handlers_admin.Response:
    properties:
      msg:
        type: string
    type: object
  internal_http-server_handlers_admin.UpdateRequest:
    properties:
      field:
        type: string
      value: {}
    type: object
  internal_http-server_handlers_admin.Users:
    properties:
      users:
        items:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        type: array
    type: object
  internal_http-server_handlers_user.RefreshToken:
    properties:
      refresh:
        type: string
    type: object
  internal_http-server_handlers_user.Response:
    properties:
      msg:
        type: string
    type: object
  internal_http-server_handlers_user.Tokens:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
host: 51.250.113.72:8082
info:
  contact:
    email: s4bb4t@yandex.ru
    name: s4bb4t
  description: This is a RESTful API service for EasyDev. It provides various user
    management functionalities such as user registration, authentication, profile
    updates, and admin operations.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: sAPI
  version: v0.2.0
paths:
  /admin/users:
    get:
      description: Gets users by accepting a url query payload containing filters.
      parameters:
      - description: Search in login or username or email
        in: query
        name: search
        type: string
      - description: order asc or desc or none (asc, decs - order by email, none -
          order by id)
        in: query
        name: order
        type: string
      - description: block status
        in: query
        name: blocked
        type: boolean
      - description: limit of users for query
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Retrieve successful. Returns users.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Users'
        "401":
          description: User context not found.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "403":
          description: Not enough rights.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /admin/users/{id}:
    delete:
      description: Removes user by id in url.
      produces:
      - application/json
      responses:
        "200":
          description: Remove successful. Returns ok.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "400":
          description: Missing or wrong id.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "401":
          description: User context not found.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "403":
          description: Not enough rights.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Remove user
      tags:
      - admin
    get:
      description: Retrieves user's profile by id.
      produces:
      - application/json
      responses:
        "200":
          description: Retrieve successful. Returns user.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: Missing or wrong id.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "401":
          description: User context not found.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "403":
          description: Not enough rights.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Retrieve user's profile
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Updates user by id by accepting a JSON payload containing user.
      parameters:
      - description: Complete user data
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.User'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful. Returns user ok.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: Login or email already used.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "401":
          description: User context not found.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "403":
          description: Not enough rights.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Update user's fields
      tags:
      - admin
  /admin/users/{id}/block:
    post:
      description: Blocks user by id in url.
      produces:
      - application/json
      responses:
        "200":
          description: Block successful. Returns user ok.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: No such field.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - admin
  /admin/users/{id}/rights:
    post:
      consumes:
      - application/json
      description: Updates user by id by accepting a JSON payload containing user's
        rights.
      parameters:
      - description: Complete user data
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/internal_http-server_handlers_admin.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful. Returns ok.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: No such field.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      summary: Update user's rights
      tags:
      - admin
  /admin/users/{id}/unlock:
    post:
      description: Unlocks user by id in url.
      produces:
      - application/json
      responses:
        "200":
          description: Unlock successful. Returns user ok.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: No such field.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_admin.Response'
      security:
      - BearerAuth: []
      summary: Unlock user
      tags:
      - admin
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Recieve a user's refresh token in JSON format.
      parameters:
      - description: User's refresh token
        in: body
        name: AuthData
        required: true
        schema:
          $ref: '#/definitions/internal_http-server_handlers_user.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful. Returns a JWT token.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Tokens'
        "400":
          description: Invalid input.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "401":
          description: 'Invalid credentials: token is expired - must auth again.'
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
      summary: Refresh user's access token
      tags:
      - user
  /signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user by accepting their login credentials (login
        and password) in JSON format.
      parameters:
      - description: User login credentials
        in: body
        name: AuthData
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.AuthData'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful. Returns a JWT token.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Tokens'
        "400":
          description: Invalid input.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "401":
          description: Invalid credentials.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
      summary: Authenticate user
      tags:
      - user
  /signup:
    post:
      consumes:
      - application/json
      description: Handles the registration of a new user by accepting a JSON payload
        containing user data.
      parameters:
      - description: Complete user data for registration
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.User'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful. Returns user data.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: Invalid input.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "409":
          description: User already exists.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
      summary: Register a new user
      tags:
      - user
  /todos:
    get:
      description: Gets all tasks and returns a JSON containing task data.
      parameters:
      - description: all, completed, or inwork
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved successfully. Returns status code OK.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.MetaResponse'
        "400":
          description: Unknown filter.
          schema:
            type: string
        "500":
          description: Internal error.
          schema:
            type: string
      summary: Get all tasks
      tags:
      - todo
    post:
      consumes:
      - application/json
      description: Handles the creation of a new task by accepting a JSON payload
        containing task data.
      parameters:
      - description: Complete task data for creation
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Creation successful. Returns task with status code OK.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.Todo'
        "400":
          description: failed to deserialize json request.
          schema:
            type: string
        "500":
          description: Internal error.
          schema:
            type: string
      summary: Create a new task
      tags:
      - todo
  /todos/{id}:
    delete:
      description: Deletes a task by ID in the URL.
      produces:
      - application/json
      responses:
        "200":
          description: Deletion successful. Returns status code OK.
          schema:
            type: string
        "400":
          description: Missing or wrong id.
          schema:
            type: string
        "404":
          description: No such task.
          schema:
            type: string
        "500":
          description: Internal error.
          schema:
            type: string
      summary: Delete task
      tags:
      - todo
    get:
      description: Gets a task by ID in the URL and returns a JSON containing task
        data.
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved successfully. Returns task and status code OK.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.Todo'
        "400":
          description: Missing or wrong id.
          schema:
            type: string
        "404":
          description: No such task.
          schema:
            type: string
        "500":
          description: Internal error.
          schema:
            type: string
      summary: Get task
      tags:
      - todo
    put:
      consumes:
      - application/json
      description: Handles the update of a task by accepting a JSON payload containing
        task data.
      parameters:
      - description: Complete task data for update
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful. Returns task with status code OK.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_todoConfig.Todo'
        "400":
          description: Missing or wrong id.
          schema:
            type: string
        "404":
          description: No such task.
          schema:
            type: string
        "500":
          description: Internal error.
          schema:
            type: string
      summary: Update task
      tags:
      - todo
  /user/profile:
    get:
      description: Retrieves the full profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Returns the user profile data.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the user profile with new data provided in the JSON payload.
      parameters:
      - description: Updated user data
        in: body
        name: Userdata
        required: true
        schema:
          $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.User'
      produces:
      - application/json
      responses:
        "200":
          description: Profile successfully updated.
          schema:
            $ref: '#/definitions/github_com_sabbatD_srest-api_internal_lib_userConfig.TableUser'
        "400":
          description: Login or email already used.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "404":
          description: No such user.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
        "500":
          description: Internal error.
          schema:
            $ref: '#/definitions/internal_http-server_handlers_user.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'JWT Bearer token required for accessing protected routes. Format:
      Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
